"""
N명의 병사가 무작위로 나열되어 있다.
각 병사는 특정한 값의 전투력을 보유하고있다.
병사를 배치할 때는 전투력이 높은 병사가 앞쪽으로 오도록 내림차순 배치를 하고자한다.
다시말해 앞쪽에 있는 병사는 항상 뒤쪽에 있는 병사보다 높아야합니다.

또한 배치 과정에서는 특정한 위치에 있는 병사를 열외시크는 방법을 이용한다.
그러면서도 남아 잇는 수가 최대가 되도록ㄷ 하고 싶다.
"""

"""
첫째 줄에 N이 주어진다. (1 <= N <= 2,000) 둘째 줄에 각 병사의 전투력이 공백으로
구분되어 차례대로 주어진다. 각 병사의 전투력은 10,000,000보다 작거나 같다.

첫째 줄에 남아 있는 병사의 수가 최대가 되도록 하기 위해서 열외시켜야 하는 병수의 수를
출력하라.
"""

"""
이 문제는 기본 아이디어는 가장 긴 증가하는 부분 수열(Longest Increasing Subsequence, LIS)로
알려진 전형적인 다이나믹 프로그래밍 문제의 아이디어와 같습니다.

예를 들어 하나의 수열 array = {4,2,5,8,5,11,15}이 있다고 합시다.
-   이 수열의 가장 긴 증가하는 부분 수열은 {4,5,8,11,15}입니다.

본 문제는 가장 긴 감소하는 붑누 수열을 찾는 문제로 치환할 수 있으므로, LIS알고리즘을
조금 수정하여 적용함으로써 정답을 도출할 수 있습니다.

가장 긴 증가하는 부분 수열 (LIS) 알고리즘을 확인해봅시다.
D[i] = array[i]를 마지막 원소로 가지는 부분 수열의 최대 길이
점화식은 다음과 같습니다

모든 0 <= j < i 에 대하여, D[i] = max(D[i], D[j] + 1) if array[j] < array[i]
"""

def sol(array=None):
    if array is None:
        array = [15,11,4,8,5,2,4]
    # 순서를 뒤집어 '최장 증가 부분 수열' 문제로 변환
    array.reverse()
    n = len(array)

    # 다이나믹 프로그래밍을 위한 1차원 DP 테이플 초기화
    dp = [1] * n

    # 가장 긴 증가하는 부분 수열(LIS) 알고리즘 수행

    for i in range(1, n):
        for j in range(0, i):
            if array[j] < array[i]:
                dp[i] = max(dp[i], dp[j] + 1)
    # 열외해야 하는 병사의 최소 수를 출력
    print(n - max(dp))
if __name__ == '__main__':
    sol()

