다이나믹 프로그래밍은 메모리를 적절히 사용하여 수행 시간 효율성을 비약적으로 향상시키는 방법이다.
이미 계산된 결과(작은 문제)는 별도의 메모리 영역에 저장하여 다시 계산하지 않도록 합니다.
다이나믹 프로그래밍의 구현은 일반적으로 두 가지 방식(탑다운과 보텀업)으로 구성됩니다.

다이나믹 프로그래밍은 동적 계획법이라고도 부릅니다
일반적인 프로그래밍 분야에서 동적이란 어떤 의미일까요
    자료구조에서 동적 할당은 프로그램이 실행되는 도중 실행에 필요한 메모리를 할당하는 기법을 의미한다
반면에 다이나믹 프로그래밍에서 쓰인 다이나믹은 별 의미없다


다이나믹 프로그래밍은 문제가 다음의 조건을 만족할 때 사용할 수 있다
1. 최적 부분 구조(Optimal Substructure)
    -   큰 문제를 작은 문제로 나눌 수 있으며 작은 문제의 답을 모아서 큰 문제를 해결할 수 있다
2. 중복되는 부분 문제 (Overlapping Subproblem)
    -   동일한 작은 문제를 반복적으로 해결해야한다.

다이나믹 프로그래밍과 분할 정복은 모두 최적 부분 구조를 가질 때 사용할 수 있다.
    - 큰 문제는 작은 문제로 나누어지며 작은 문제의 답을 모아서 큰 문제를 해결 할 수 있는 상황
다이나믹 프로그래밍과 분할 정복의 차이점은 부분 문제의 중복이다.
    - 다이나믹 프로그래밍 문제에서 각 부분 문제들이 서로 영향을 미치며 부분 문제가 중복된다
    - 분할 정복 문제에서는 동일한 부분 문제가 반복적으로 계산되지 않는다.

분할 정복의 대표적인 예시는 퀵 정렬
 -> 한 번 원소(Pivot)가 자리를 변경해서 자리를 잡으면 그 기준 원소의 위치는 바뀌지 않는다.
    분할 이후에 해당 피벗을 다시 처리하는 부분 문제는 호출하지 않는다.
 퀵 정렬은 분할 후 분할 전 pivot의 위치가 변경되지 않기때문에 부분문제가 중복되지 않는다고 표현한다.